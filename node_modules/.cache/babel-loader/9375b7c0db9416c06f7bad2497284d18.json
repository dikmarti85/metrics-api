{"ast":null,"code":"import _objectSpread from \"/Users/dimartinez/workspace/metrics-api-fe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/dimartinez/workspace/metrics-api-fe/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Users/dimartinez/workspace/metrics-api-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/dimartinez/workspace/metrics-api-fe/src/app/views/material-kit/auto-complete/AsyncAutocomplete.jsx\",\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"/Users/dimartinez/workspace/metrics-api-fe/node_modules/@babel/runtime/regenerator/index.js\";\nimport React from 'react';\nimport fetch from 'cross-fetch';\nimport { TextField, CircularProgress, Autocomplete } from '@mui/material';\nimport { styled } from '@mui/system';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar AutoComplete = styled(Autocomplete)(function () {\n  return {\n    width: 300\n  };\n});\n\nfunction sleep() {\n  var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return new Promise(function (resolve) {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport default function AsyncAutocomplete() {\n  _s();\n\n  var _this = this;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      options = _React$useState4[0],\n      setOptions = _React$useState4[1];\n\n  var loading = open && options.length === 0;\n  React.useEffect(function () {\n    var active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    ;\n\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, countries;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('https://country.register.gov.uk/records.json?page-size=5000');\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return sleep(1e3);\n\n            case 5:\n              _context.next = 7;\n              return response.json();\n\n            case 7:\n              countries = _context.sent;\n\n              if (active) {\n                setOptions(Object.keys(countries).map(function (key) {\n                  return countries[key].item[0];\n                }));\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n\n    return function () {\n      active = false;\n    };\n  }, [loading]);\n  React.useEffect(function () {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n  return /*#__PURE__*/_jsxDEV(AutoComplete, {\n    id: \"asynchronous-demo\",\n    open: open,\n    onOpen: function onOpen() {\n      setOpen(true);\n    },\n    onClose: function onClose() {\n      setOpen(false);\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return option.name;\n    },\n    options: options,\n    loading: loading,\n    renderInput: function renderInput(params) {\n      return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n        label: \"Asynchronous\",\n        fullWidth: true,\n        variant: \"outlined\",\n        InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n          endAdornment: /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              color: \"inherit\",\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 37\n            }, _this) : null, params.InputProps.endAdornment]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 29\n          }, _this)\n        })\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AsyncAutocomplete, \"NAnsH/wQUpBOztFs1nPXEavBw+I=\");\n\n_c = AsyncAutocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AsyncAutocomplete\");","map":{"version":3,"sources":["/Users/dimartinez/workspace/metrics-api-fe/src/app/views/material-kit/auto-complete/AsyncAutocomplete.jsx"],"names":["React","fetch","TextField","CircularProgress","Autocomplete","styled","AutoComplete","width","sleep","delay","Promise","resolve","setTimeout","AsyncAutocomplete","useState","open","setOpen","options","setOptions","loading","length","useEffect","active","undefined","response","json","countries","Object","keys","map","key","item","option","name","params","InputProps","endAdornment"],"mappings":"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","sourcesContent":["import React from 'react'\nimport fetch from 'cross-fetch'\nimport { TextField, CircularProgress, Autocomplete } from '@mui/material'\nimport { styled } from '@mui/system'\n\nconst AutoComplete = styled(Autocomplete)(() => ({\n    width: 300,\n}))\n\nfunction sleep(delay = 0) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\nexport default function AsyncAutocomplete() {\n    const [open, setOpen] = React.useState(false)\n    const [options, setOptions] = React.useState([])\n    const loading = open && options.length === 0\n\n    React.useEffect(() => {\n        let active = true\n\n        if (!loading) {\n            return undefined\n        }\n\n        ; (async () => {\n            const response = await fetch(\n                'https://country.register.gov.uk/records.json?page-size=5000'\n            )\n            await sleep(1e3) // For demo purposes.\n            const countries = await response.json()\n\n            if (active) {\n                setOptions(\n                    Object.keys(countries).map((key) => countries[key].item[0])\n                )\n            }\n        })()\n\n        return () => {\n            active = false\n        }\n    }, [loading])\n\n    React.useEffect(() => {\n        if (!open) {\n            setOptions([])\n        }\n    }, [open])\n\n    return (\n        <AutoComplete\n            id=\"asynchronous-demo\"\n            open={open}\n            onOpen={() => {\n                setOpen(true)\n            }}\n            onClose={() => {\n                setOpen(false)\n            }}\n            getOptionLabel={(option) => option.name}\n            options={options}\n            loading={loading}\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    label=\"Asynchronous\"\n                    fullWidth\n                    variant=\"outlined\"\n                    InputProps={{\n                        ...params.InputProps,\n                        endAdornment: (\n                            <React.Fragment>\n                                {loading ? (\n                                    <CircularProgress\n                                        color=\"inherit\"\n                                        size={20}\n                                    />\n                                ) : null}\n                                {params.InputProps.endAdornment}\n                            </React.Fragment>\n                        ),\n                    }}\n                />\n            )}\n        />\n    )\n}\n"]},"metadata":{},"sourceType":"module"}