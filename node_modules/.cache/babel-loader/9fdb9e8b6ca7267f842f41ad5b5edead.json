{"ast":null,"code":"import _defineProperty from \"/Users/dimartinez/workspace/metrics-api/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/dimartinez/workspace/metrics-api/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/dimartinez/workspace/metrics-api/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/dimartinez/workspace/metrics-api/src/app/views/metrics/CalculateMetricView.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { Fragment, lazy, useState } from 'react';\nimport { Autocomplete, Button, Grid, Icon, TextField } from '@mui/material';\nimport { createFilterOptions } from '@mui/material/Autocomplete';\nimport { styled, useTheme } from '@mui/system';\nimport Loadable from \"../../components/Loadable/Loadable\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport { DatePicker } from \"@mui/lab\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport { ValidatorForm } from \"react-material-ui-form-validator\";\nimport { Span } from \"../../components/Typography\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Result = Loadable(_c2 = /*#__PURE__*/lazy(_c = function _c() {\n  return import(\"./Result\");\n}));\n_c3 = Result;\nvar MetricChart = Loadable(_c5 = /*#__PURE__*/lazy(_c4 = function _c4() {\n  return import(\"./MetricChart\");\n}));\n_c6 = MetricChart;\nvar AutoComplete = styled(Autocomplete)(function () {\n  return {\n    width: 300,\n    marginBottom: '16px'\n  };\n});\n\nvar CalculateMetricView = function CalculateMetricView() {\n  _s();\n\n  var theme = useTheme();\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      source = _React$useState2[0],\n      setSource = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      valueCombo = _React$useState4[0],\n      setValueCombo = _React$useState4[1];\n\n  var _useState = useState({\n    date: new Date()\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      labelsX = _React$useState6[0],\n      setLabelsX = _React$useState6[1];\n\n  var handleChange = function handleChange(event) {\n    event.persist();\n    setState(_objectSpread(_objectSpread({}, state), {}, _defineProperty({}, event.target.name, event.target.value)));\n  };\n\n  var handleComboChange = function handleComboChange(event, newValue) {\n    if (newValue && newValue.inputValue) {\n      setValueCombo({\n        label: newValue.inputValue\n      });\n      return;\n    }\n\n    setValueCombo(newValue);\n  };\n\n  var handleDateChange = function handleDateChange(date) {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      date: date\n    }));\n  };\n\n  var reload = function reload() {\n    return window.location.reload();\n  };\n\n  var name = state.name,\n      value = state.value,\n      date = state.date;\n\n  var handleSubmit = function handleSubmit(event) {\n    var url = 'https://metrics-351617.rj.r.appspot.com/metrics/calc';\n    var data = {\n      dateFrom: nameParam,\n      timeType: \"\",\n      metricName: \"\"\n    };\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (res) {\n      return res.json();\n    }).catch(function (error) {\n      return console.error('Error:', error);\n    }).then(function (response) {\n      return console.log('Success:', response);\n    });\n    reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ValidatorForm, {\n      onSubmit: handleSubmit,\n      onError: function onError() {\n        return null;\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 6,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          lg: 6,\n          md: 6,\n          sm: 12,\n          xs: 12,\n          sx: {\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(AutoComplete, {\n            options: suggestions,\n            getOptionLabel: function getOptionLabel(option) {\n              return option.label;\n            },\n            onChange: handleComboChange,\n            renderInput: function renderInput(params) {\n              return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n                label: \"Select time\",\n                variant: \"outlined\",\n                fullWidth: true\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 33\n              }, _this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Metric Name\",\n            onChange: handleChange,\n            type: \"text\",\n            name: \"name\",\n            value: name || '',\n            validators: ['required'],\n            errorMessages: ['this field is required']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(TextField, {\n            label: \"Metric Value\",\n            onChange: handleChange,\n            type: \"text\",\n            name: \"value\",\n            value: value || '',\n            validators: ['required'],\n            errorMessages: ['this field is required']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(LocalizationProvider, {\n            dateAdapter: AdapterDateFns,\n            children: /*#__PURE__*/_jsxDEV(DatePicker, {\n              value: date,\n              onChange: handleDateChange,\n              renderInput: function renderInput(props) {\n                return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, props), {}, {\n                  // variant=\"Outlined\"\n                  id: \"mui-pickers-date\",\n                  label: \"Date\",\n                  sx: {\n                    mb: 2,\n                    width: '100%'\n                  }\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 37\n                }, _this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 29\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        type: \"submit\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Icon, {\n          children: \"send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(Span, {\n          sx: {\n            pl: 1,\n            textTransform: 'capitalize'\n          },\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: state.date.toLocaleString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(MetricChart, {\n      height: \"350px\",\n      color: [theme.palette.primary.dark, theme.palette.primary.light],\n      values: source\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(CalculateMetricView, \"lApprIMz0MRs9omrMQA91Q/fmXw=\", false, function () {\n  return [useTheme];\n});\n\n_c7 = CalculateMetricView;\nexport default CalculateMetricView;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"Result$Loadable$lazy\");\n$RefreshReg$(_c2, \"Result$Loadable\");\n$RefreshReg$(_c3, \"Result\");\n$RefreshReg$(_c4, \"MetricChart$Loadable$lazy\");\n$RefreshReg$(_c5, \"MetricChart$Loadable\");\n$RefreshReg$(_c6, \"MetricChart\");\n$RefreshReg$(_c7, \"CalculateMetricView\");","map":{"version":3,"sources":["/Users/dimartinez/workspace/metrics-api/src/app/views/metrics/CalculateMetricView.jsx"],"names":["React","Fragment","lazy","useState","Autocomplete","Button","Grid","Icon","TextField","createFilterOptions","styled","useTheme","Loadable","AdapterDateFns","DatePicker","LocalizationProvider","ValidatorForm","Span","Result","MetricChart","AutoComplete","width","marginBottom","CalculateMetricView","theme","source","setSource","valueCombo","setValueCombo","date","Date","state","setState","labelsX","setLabelsX","handleChange","event","persist","target","name","value","handleComboChange","newValue","inputValue","label","handleDateChange","reload","window","location","handleSubmit","url","data","dateFrom","nameParam","timeType","metricName","fetch","method","body","JSON","stringify","headers","then","res","json","catch","error","console","response","log","mt","suggestions","option","params","props","mb","pl","textTransform","toLocaleString","palette","primary","dark","light"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,IAAzB,EAA+BC,QAA/B,QAA8C,OAA9C;AACA,SAAQC,YAAR,EAAsBC,MAAtB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0CC,SAA1C,QAA0D,eAA1D;AACA,SAAQC,mBAAR,QAAkC,4BAAlC;AACA,SAAQC,MAAR,EAAgBC,QAAhB,QAA+B,aAA/B;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,SAAQC,UAAR,QAAyB,UAAzB;AACA,OAAOC,oBAAP,MAAiC,+BAAjC;AACA,SAAQC,aAAR,QAA4B,kCAA5B;AACA,SAAQC,IAAR,QAAmB,6BAAnB;;AAEA,IAAMC,MAAM,GAAGN,QAAQ,oBAACV,IAAI,MAAC;AAAA,SAAM,OAAO,UAAP,CAAN;AAAA,CAAD,CAAL,CAAvB;MAAMgB,M;AACN,IAAMC,WAAW,GAAGP,QAAQ,oBAACV,IAAI,OAAC;AAAA,SAAM,OAAO,eAAP,CAAN;AAAA,CAAD,CAAL,CAA5B;MAAMiB,W;AAEN,IAAMC,YAAY,GAAGV,MAAM,CAACN,YAAD,CAAN,CAAqB;AAAA,SAAO;AAC7CiB,IAAAA,KAAK,EAAE,GADsC;AAE7CC,IAAAA,YAAY,EAAE;AAF+B,GAAP;AAAA,CAArB,CAArB;;AAKA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAAA;;AAC9B,MAAMC,KAAK,GAAGb,QAAQ,EAAtB;;AAEA,wBAA4BX,KAAK,CAACG,QAAN,CAAe,EAAf,CAA5B;AAAA;AAAA,MAAOsB,MAAP;AAAA,MAAeC,SAAf;;AACA,yBAAoC1B,KAAK,CAACG,QAAN,CAAe,IAAf,CAApC;AAAA;AAAA,MAAOwB,UAAP;AAAA,MAAmBC,aAAnB;;AACA,kBAA0BzB,QAAQ,CAAC;AAC/B0B,IAAAA,IAAI,EAAE,IAAIC,IAAJ;AADyB,GAAD,CAAlC;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AAIA,yBAA8BhC,KAAK,CAACG,QAAN,CAAe,EAAf,CAA9B;AAAA;AAAA,MAAO8B,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC5BA,IAAAA,KAAK,CAACC,OAAN;AACAL,IAAAA,QAAQ,iCACDD,KADC,2BAEHK,KAAK,CAACE,MAAN,CAAaC,IAFV,EAEiBH,KAAK,CAACE,MAAN,CAAaE,KAF9B,GAAR;AAIH,GAND;;AAQA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACL,KAAD,EAAQM,QAAR,EAAqB;AAC3C,QAAIA,QAAQ,IAAIA,QAAQ,CAACC,UAAzB,EAAqC;AACjCf,MAAAA,aAAa,CAAC;AACVgB,QAAAA,KAAK,EAAEF,QAAQ,CAACC;AADN,OAAD,CAAb;AAGA;AACH;;AAEDf,IAAAA,aAAa,CAACc,QAAD,CAAb;AAEH,GAVD;;AAYA,MAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAChB,IAAD,EAAU;AAC/BG,IAAAA,QAAQ,iCAAKD,KAAL;AAAYF,MAAAA,IAAI,EAAJA;AAAZ,OAAR;AACH,GAFD;;AAIA,MAAMiB,MAAM,GAAC,SAAPA,MAAO;AAAA,WAAIC,MAAM,CAACC,QAAP,CAAgBF,MAAhB,EAAJ;AAAA,GAAb;;AAEA,MACIP,IADJ,GAIIR,KAJJ,CACIQ,IADJ;AAAA,MAEIC,KAFJ,GAIIT,KAJJ,CAEIS,KAFJ;AAAA,MAGIX,IAHJ,GAIIE,KAJJ,CAGIF,IAHJ;;AAMA,MAAMoB,YAAY,GAAG,SAAfA,YAAe,CAACb,KAAD,EAAW;AAE5B,QAAIc,GAAG,GAAG,sDAAV;AACA,QAAIC,IAAI,GAAG;AACPC,MAAAA,QAAQ,EAAEC,SADH;AAEPC,MAAAA,QAAQ,EAAE,EAFH;AAGPC,MAAAA,UAAU,EAAE;AAHL,KAAX;AAMAC,IAAAA,KAAK,CAACN,GAAD,EAAM;AACPO,MAAAA,MAAM,EAAE,MADD;AAEPC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,IAAf,CAFC;AAGPU,MAAAA,OAAO,EAAC;AACJ,wBAAgB;AADZ;AAHD,KAAN,CAAL,CAMGC,IANH,CAMQ,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KANX,EAOKC,KAPL,CAOW,UAAAC,KAAK;AAAA,aAAIC,OAAO,CAACD,KAAR,CAAc,QAAd,EAAwBA,KAAxB,CAAJ;AAAA,KAPhB,EAQKJ,IARL,CAQU,UAAAM,QAAQ;AAAA,aAAID,OAAO,CAACE,GAAR,CAAY,UAAZ,EAAwBD,QAAxB,CAAJ;AAAA,KARlB;AAUAtB,IAAAA,MAAM;AAET,GArBD;;AAuBA,sBACI,QAAC,QAAD;AAAA,4BACI,QAAC,aAAD;AAAe,MAAA,QAAQ,EAAEG,YAAzB;AAAuC,MAAA,OAAO,EAAE;AAAA,eAAM,IAAN;AAAA,OAAhD;AAAA,8BACI,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAE,CAAzB;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,CAAf;AAAkB,UAAA,EAAE,EAAE,CAAtB;AAAyB,UAAA,EAAE,EAAE,EAA7B;AAAiC,UAAA,EAAE,EAAE,EAArC;AAAyC,UAAA,EAAE,EAAE;AAACqB,YAAAA,EAAE,EAAE;AAAL,WAA7C;AAAA,kCACI,QAAC,YAAD;AACI,YAAA,OAAO,EAAEC,WADb;AAEI,YAAA,cAAc,EAAE,wBAACC,MAAD;AAAA,qBAAYA,MAAM,CAAC5B,KAAnB;AAAA,aAFpB;AAGI,YAAA,QAAQ,EAAEH,iBAHd;AAII,YAAA,WAAW,EAAE,qBAACgC,MAAD;AAAA,kCACT,QAAC,SAAD,kCACQA,MADR;AAEI,gBAAA,KAAK,EAAC,aAFV;AAGI,gBAAA,OAAO,EAAC,UAHZ;AAII,gBAAA,SAAS;AAJb;AAAA;AAAA;AAAA;AAAA,uBADS;AAAA;AAJjB;AAAA;AAAA;AAAA;AAAA,mBADJ,eAcI,QAAC,SAAD;AACI,YAAA,KAAK,EAAC,aADV;AAEI,YAAA,QAAQ,EAAEtC,YAFd;AAGI,YAAA,IAAI,EAAC,MAHT;AAII,YAAA,IAAI,EAAC,MAJT;AAKI,YAAA,KAAK,EAAEI,IAAI,IAAI,EALnB;AAMI,YAAA,UAAU,EAAE,CAAC,UAAD,CANhB;AAOI,YAAA,aAAa,EAAE,CAAC,wBAAD;AAPnB;AAAA;AAAA;AAAA;AAAA,mBAdJ,eAuBI,QAAC,SAAD;AACI,YAAA,KAAK,EAAC,cADV;AAEI,YAAA,QAAQ,EAAEJ,YAFd;AAGI,YAAA,IAAI,EAAC,MAHT;AAII,YAAA,IAAI,EAAC,OAJT;AAKI,YAAA,KAAK,EAAEK,KAAK,IAAI,EALpB;AAMI,YAAA,UAAU,EAAE,CAAC,UAAD,CANhB;AAOI,YAAA,aAAa,EAAE,CACX,wBADW;AAPnB;AAAA;AAAA;AAAA;AAAA,mBAvBJ,eAmCI,QAAC,oBAAD;AAAsB,YAAA,WAAW,EAAE3B,cAAnC;AAAA,mCACI,QAAC,UAAD;AACI,cAAA,KAAK,EAAEgB,IADX;AAEI,cAAA,QAAQ,EAAEgB,gBAFd;AAGI,cAAA,WAAW,EAAE,qBAAC6B,KAAD;AAAA,oCACT,QAAC,SAAD,kCACQA,KADR;AAEI;AACA,kBAAA,EAAE,EAAC,kBAHP;AAII,kBAAA,KAAK,EAAC,MAJV;AAKI,kBAAA,EAAE,EAAE;AAACC,oBAAAA,EAAE,EAAE,CAAL;AAAQtD,oBAAAA,KAAK,EAAE;AAAf;AALR;AAAA;AAAA;AAAA;AAAA,yBADS;AAAA;AAHjB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,mBAnCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,eADJ,eAwDI,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,SAAd;AAAwB,QAAA,OAAO,EAAC,WAAhC;AAA4C,QAAA,IAAI,EAAC,QAAjD;AAA0D,QAAA,QAAQ,EAAE4B,YAApE;AAAA,gCACI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,eAEI,QAAC,IAAD;AAAM,UAAA,EAAE,EAAE;AAAC2B,YAAAA,EAAE,EAAE,CAAL;AAAQC,YAAAA,aAAa,EAAE;AAAvB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,eAxDJ,eA8DI;AAAA,kBACK9C,KAAK,CAACF,IAAN,CAAWiD,cAAX;AADL;AAAA;AAAA;AAAA;AAAA,eA9DJ;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,eA6EI,QAAC,WAAD;AACI,MAAA,MAAM,EAAC,OADX;AAEI,MAAA,KAAK,EAAE,CACHtD,KAAK,CAACuD,OAAN,CAAcC,OAAd,CAAsBC,IADnB,EAEHzD,KAAK,CAACuD,OAAN,CAAcC,OAAd,CAAsBE,KAFnB,CAFX;AAMI,MAAA,MAAM,EAAEzD;AANZ;AAAA;AAAA;AAAA;AAAA,aA7EJ;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AA0FH,CA5JD;;GAAMF,mB;UACYZ,Q;;;MADZY,mB;AA8JN,eAAeA,mBAAf","sourcesContent":["import React, {Fragment, lazy, useState} from 'react'\nimport {Autocomplete, Button, Grid, Icon, TextField} from '@mui/material'\nimport {createFilterOptions} from '@mui/material/Autocomplete'\nimport {styled, useTheme} from '@mui/system'\nimport Loadable from \"../../components/Loadable/Loadable\"\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport {DatePicker} from \"@mui/lab\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport {ValidatorForm} from \"react-material-ui-form-validator\";\nimport {Span} from \"../../components/Typography\";\n\nconst Result = Loadable(lazy(() => import(\"./Result\")))\nconst MetricChart = Loadable(lazy(() => import(\"./MetricChart\")))\n\nconst AutoComplete = styled(Autocomplete)(() => ({\n    width: 300,\n    marginBottom: '16px',\n}))\n\nconst CalculateMetricView = () => {\n    const theme = useTheme()\n\n    const [source, setSource] = React.useState([])\n    const [valueCombo, setValueCombo] = React.useState(null)\n    const [state, setState] = useState({\n        date: new Date(),\n    })\n\n    const [labelsX, setLabelsX] = React.useState([])\n    \n    const handleChange = (event) => {\n        event.persist()\n        setState({\n            ...state,\n            [event.target.name]: event.target.value,\n        })\n    }\n\n    const handleComboChange = (event, newValue) => {\n        if (newValue && newValue.inputValue) {\n            setValueCombo({\n                label: newValue.inputValue,\n            })\n            return\n        }\n\n        setValueCombo(newValue)\n\n    }\n\n    const handleDateChange = (date) => {\n        setState({...state, date})\n    }\n\n    const reload=()=>window.location.reload();\n\n    const {\n        name,\n        value,\n        date,\n    } = state\n\n    const handleSubmit = (event) => {\n\n        var url = 'https://metrics-351617.rj.r.appspot.com/metrics/calc';\n        var data = {\n            dateFrom: nameParam,\n            timeType: \"\",\n            metricName: \"\"\n        };\n\n        fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers:{\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n            .catch(error => console.error('Error:', error))\n            .then(response => console.log('Success:', response));\n\n        reload()\n\n    }\n\n    return (\n        <Fragment>\n            <ValidatorForm onSubmit={handleSubmit} onError={() => null}>\n                <Grid container spacing={6}>\n                    <Grid item lg={6} md={6} sm={12} xs={12} sx={{mt: 2}}>\n                        <AutoComplete\n                            options={suggestions}\n                            getOptionLabel={(option) => option.label}\n                            onChange={handleComboChange}\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label=\"Select time\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                />\n                            )}\n                        />\n                        <TextField\n                            label=\"Metric Name\"\n                            onChange={handleChange}\n                            type=\"text\"\n                            name=\"name\"\n                            value={name || ''}\n                            validators={['required']}\n                            errorMessages={['this field is required']}\n                        />\n                        <TextField\n                            label=\"Metric Value\"\n                            onChange={handleChange}\n                            type=\"text\"\n                            name=\"value\"\n                            value={value || ''}\n                            validators={['required']}\n                            errorMessages={[\n                                'this field is required'\n                            ]}\n                        />\n\n                        <LocalizationProvider dateAdapter={AdapterDateFns}>\n                            <DatePicker\n                                value={date}\n                                onChange={handleDateChange}\n                                renderInput={(props) => (\n                                    <TextField\n                                        {...props}\n                                        // variant=\"Outlined\"\n                                        id=\"mui-pickers-date\"\n                                        label=\"Date\"\n                                        sx={{mb: 2, width: '100%'}}\n                                    />\n                                )}\n                            />\n                        </LocalizationProvider>\n                    </Grid>\n\n                </Grid>\n\n                <Button color=\"primary\" variant=\"contained\" type=\"submit\" onSubmit={handleSubmit}>\n                    <Icon>send</Icon>\n                    <Span sx={{pl: 1, textTransform: 'capitalize'}}>\n                        Send\n                    </Span>\n                </Button>\n                <div>\n                    {state.date.toLocaleString()}\n                </div>\n            </ValidatorForm>\n\n\n\n\n\n\n\n\n\n            {\n            <MetricChart\n                height=\"350px\"\n                color={[\n                    theme.palette.primary.dark,\n                    theme.palette.primary.light,\n                ]}\n                values={source}\n            />\n            }\n\n        </Fragment>\n    )\n}\n\nexport default CalculateMetricView\n"]},"metadata":{},"sourceType":"module"}