{"ast":null,"code":"import _objectSpread from\"/home/dikmarti/metrics-api/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/home/dikmarti/metrics-api/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import Mock from'../mock';import*as _ from'lodash';var TodoDB={todo:[{id:1,title:'API problem',note:'API is malfunctioning. kindly fix it',important:true,starred:true,done:false,read:false,selected:false,startDate:new Date().toISOString(),dueDate:new Date().toISOString(),tag:[1,2]},{id:2,title:'Mobile problem',note:'Mobile is malfunctioning. fix it',important:false,starred:false,done:true,read:true,selected:false,startDate:new Date().toISOString(),dueDate:new Date().toISOString(),tag:[2]},{id:3,title:'API problem',note:'API is malfunctioning. fix it',important:false,starred:false,done:true,read:false,selected:false,startDate:new Date().toISOString(),dueDate:new Date().toISOString(),tag:[1]},{id:4,title:'API problem',note:'API is malfunctioning. fix it',important:false,starred:false,done:false,read:true,selected:false,startDate:new Date().toISOString(),dueDate:new Date().toISOString(),tag:[1,2,3]},{id:5,title:'API problem',note:'API is malfunctioning. fix it',important:false,starred:false,done:true,read:false,selected:false,startDate:new Date().toISOString(),dueDate:new Date().toISOString(),tag:[1]}],tag:[{id:1,name:'frontend'},{id:2,name:'backend'},{id:3,name:'API'},{id:4,name:'issue'},{id:5,name:'mobile'}]};Mock.onGet('/api/todo/all').reply(function(config){var response=TodoDB.todo;return[200,response];});Mock.onGet('/api/todo/tag').reply(function(config){var response=TodoDB.tag;return[200,response];});Mock.onGet('/api/todo').reply(function(config){var id=parseInt(config.data);var response=TodoDB.todo.find(function(todo){return todo.id===id;});return[200,response];});Mock.onPost('/api/todo/reorder').reply(function(config){var _JSON$parse=JSON.parse(config.data),todoList=_JSON$parse.todoList;TodoDB.todo=_toConsumableArray(todoList);var response=TodoDB.todo;return[200,response];});Mock.onPost('/api/todo/add').reply(function(config){var _JSON$parse2=JSON.parse(config.data),todo=_JSON$parse2.todo;TodoDB.todo.push(_objectSpread({},todo));var response=TodoDB.todo;return[200,response];});Mock.onPost('/api/todo/tag/add').reply(function(config){var _JSON$parse3=JSON.parse(config.data),tag=_JSON$parse3.tag;TodoDB.tag.push(_objectSpread({},tag));return[200,tag];});Mock.onPost('/api/todo/update').reply(function(config){var _JSON$parse4=JSON.parse(config.data),todo=_JSON$parse4.todo;TodoDB.todo.map(function(t,index){if(t.id===todo.id){TodoDB.todo[index]=_objectSpread({},todo);}return'dummy value';});return[200,todo];});Mock.onPost('/api/todo/delete').reply(function(config){var _JSON$parse5=JSON.parse(config.data),todo=_JSON$parse5.todo;_.remove(TodoDB.todo,function(t){return t.id===todo.id;});var response=TodoDB.todo;return[200,response];});Mock.onPost('/api/todo/tag/delete').reply(function(config){var _JSON$parse6=JSON.parse(config.data),tag=_JSON$parse6.tag;_.remove(TodoDB.tag,function(t){return t.id===tag.id;});var response=TodoDB.tag;return[200,response];});// Mock.onPost(\"/api/chat/create-chat-room\").reply(config => {\n//   let data = JSON.parse(config.data);\n//   let { id, chatId, ...rest } = data;\n//   ChatDB.user.map(user => {\n//     if (id === user.id) {\n//       user.chatInfo.push({ chatId, ...rest });\n//     }\n//   });\n//   ChatDB.chatCollection.push({\n//     id: chatId,\n//     chats: []\n//   });\n//   let temp;\n//   let response = ChatDB.user\n//     .find(user => user.id === id)\n//     .chatInfo.map(contact => {\n//       temp = ChatDB.contacts.find(user => user.id === contact.contactId);\n//       return { ...temp, ...contact };\n//     });\n//   response = _.orderBy(response, [\"lastChatTime\"], [\"desc\"]);\n//   console.log(response);\n//   return [200, response];\n// });","map":null,"metadata":{},"sourceType":"module"}