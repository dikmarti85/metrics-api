{"ast":null,"code":"import _objectSpread from \"/Users/dimartinez/workspace/matx-react-master/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/dimartinez/workspace/matx-react-master/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/dimartinez/workspace/matx-react-master/src/app/views/metrics/AutocompleteCombo.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { Fragment } from 'react';\nimport { TextField, Autocomplete } from '@mui/material';\nimport { createFilterOptions } from '@mui/material/Autocomplete';\nimport { styled } from '@mui/system';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar AutoComplete = styled(Autocomplete)(function () {\n  return {\n    width: 300,\n    marginBottom: '16px'\n  };\n});\nvar suggestions = [{\n  label: '5 minutes'\n}, {\n  label: '15 minutes'\n}, {\n  label: '30 minutes'\n}, {\n  label: '1 hour'\n}, {\n  label: '4 hours'\n}, {\n  label: '10 hours'\n}, {\n  label: '1 day'\n}, {\n  label: '2 days'\n}, {\n  label: '7 days'\n}];\nvar filter = createFilterOptions();\n\nvar AutocompleteCombo = function AutocompleteCombo() {\n  _s();\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState({\n    isSubmitted: false\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      state = _React$useState4[0],\n      setState = _React$useState4[1];\n\n  var _React$useState5 = React.useState({\n    name: '',\n    value: ''\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      responseData = _React$useState6[0],\n      setResponseData = _React$useState6[1];\n\n  var swUrl = \"https://metrics-351617.rj.r.appspot.com/metrics/\";\n\n  var handleChange = function handleChange(event, newValue) {\n    if (newValue && newValue.inputValue) {\n      setValue({\n        label: newValue.inputValue\n      });\n      return;\n    }\n\n    setValue(newValue);\n    fetch(swUrl).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      console.log(response);\n      setResponseData(response);\n      setState({\n        isSubmitted: true\n      });\n    }).catch(function (error) {\n      console.log('error: ' + error);\n    });\n  };\n\n  var filterOptions = function filterOptions(options, params) {\n    var filtered = filter(options, params);\n\n    if (params.inputValue !== '') {\n      filtered.push({\n        inputValue: params.inputValue,\n        label: \"Add \\\"\".concat(params.inputValue, \"\\\"\")\n      });\n    }\n\n    return filtered;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AutoComplete, {\n      options: suggestions,\n      getOptionLabel: function getOptionLabel(option) {\n        return option.label;\n      },\n      onChange: handleChange,\n      renderInput: function renderInput(params) {\n        return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n          label: \"Combo box\",\n          variant: \"outlined\",\n          fullWidth: true\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(AutocompleteCombo, \"JPCRhekpLeW1S/5HxmlYs5aULSg=\");\n\n_c = AutocompleteCombo;\nexport default AutocompleteCombo;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutocompleteCombo\");","map":{"version":3,"sources":["/Users/dimartinez/workspace/matx-react-master/src/app/views/metrics/AutocompleteCombo.jsx"],"names":["React","Fragment","TextField","Autocomplete","createFilterOptions","styled","AutoComplete","width","marginBottom","suggestions","label","filter","AutocompleteCombo","useState","value","setValue","isSubmitted","state","setState","name","responseData","setResponseData","swUrl","handleChange","event","newValue","inputValue","fetch","then","response","json","console","log","catch","error","filterOptions","options","params","filtered","push","option"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react'\nimport { TextField, Autocomplete } from '@mui/material'\nimport { createFilterOptions } from '@mui/material/Autocomplete'\nimport { styled } from '@mui/system'\n\nconst AutoComplete = styled(Autocomplete)(() => ({\n    width: 300,\n    marginBottom: '16px',\n}))\n\nconst suggestions = [\n    { label: '5 minutes' },\n    { label: '15 minutes' },\n    { label: '30 minutes' },\n    { label: '1 hour' },\n    { label: '4 hours' },\n    { label: '10 hours' },\n    { label: '1 day' },\n    { label: '2 days' },\n    { label: '7 days' },\n]\n\nconst filter = createFilterOptions()\n\nconst AutocompleteCombo = () => {\n    const [value, setValue] = React.useState(null)\n    const [state, setState] = React.useState({\n        isSubmitted: false,\n    })\n    const [responseData, setResponseData] = React.useState({\n        name: '',\n        value: '',\n    })\n    const swUrl = `https://metrics-351617.rj.r.appspot.com/metrics/`\n\n    const handleChange = (event, newValue) => {\n        if (newValue && newValue.inputValue) {\n            setValue({\n                label: newValue.inputValue,\n            })\n            return\n        }\n        setValue(newValue)\n\n        fetch(swUrl)\n            .then(response => response.json())\n            .then(response => {\n                console.log(response)\n                setResponseData(response)\n                setState({isSubmitted: true})\n            })\n            .catch((error) => {\n                console.log(\n                    'error: ' + error\n                )\n            })\n    }\n\n    const filterOptions = (options, params) => {\n        const filtered = filter(options, params)\n        if (params.inputValue !== '') {\n            filtered.push({\n                inputValue: params.inputValue,\n                label: `Add \"${params.inputValue}\"`,\n            })\n        }\n        return filtered\n    }\n\n    return (\n        <Fragment>\n            <AutoComplete\n                options={suggestions}\n                getOptionLabel={(option) => option.label}\n                onChange={handleChange}\n                renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        label=\"Combo box\"\n                        variant=\"outlined\"\n                        fullWidth\n                    />\n                )}\n            />\n\n\n\n        </Fragment>\n    )\n}\n\nexport default AutocompleteCombo\n"]},"metadata":{},"sourceType":"module"}