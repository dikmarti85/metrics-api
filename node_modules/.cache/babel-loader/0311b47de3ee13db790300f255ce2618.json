{"ast":null,"code":"import _slicedToArray from \"/Users/dimartinez/workspace/metrics-api-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/dimartinez/workspace/metrics-api-fe/src/app/auth/AuthGuard.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport useAuth from 'app/hooks/useAuth';\nimport { flat } from 'app/utils/utils';\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport AppContext from '../contexts/AppContext';\nimport { AllPages } from '../routes/routes';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar getUserRoleAuthStatus = function getUserRoleAuthStatus(pathname, user, routes) {\n  if (!user) {\n    return false;\n  }\n\n  var matched = routes.find(function (r) {\n    return r.path === pathname;\n  });\n  var authenticated = matched && matched.auth && matched.auth.length ? matched.auth.includes(user.role) : true;\n  console.log(matched, user);\n  return authenticated;\n};\n\nvar AuthGuard = function AuthGuard(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useAuth = useAuth(),\n      isAuthenticated = _useAuth.isAuthenticated,\n      user = _useAuth.user; // return <>{isAuthenticated ? children : <Navigate to=\"/session/signin\" />}</>\n\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      previouseRoute = _useState2[0],\n      setPreviousRoute = _useState2[1];\n\n  var _useLocation = useLocation(),\n      pathname = _useLocation.pathname;\n\n  var routes = flat(AllPages());\n  console.log(user);\n  var isUserRoleAuthenticated = getUserRoleAuthStatus(pathname, user, routes);\n  var authenticated = isAuthenticated && isUserRoleAuthenticated; // IF YOU NEED ROLE BASED AUTHENTICATION,\n  // UNCOMMENT ABOVE TWO LINES, getUserRoleAuthStatus METHOD AND user VARIABLE\n  // AND COMMENT OUT BELOW LINE\n  // let authenticated = isAuthenticated\n\n  useEffect(function () {\n    if (previouseRoute !== null) setPreviousRoute(pathname);\n  }, [pathname, previouseRoute]);\n  if (authenticated) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);else {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/session/signin\",\n      state: {\n        redirectUrl: previouseRoute\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, _this) // <Redirect\n    //     to={{\n    //         pathname: '/session/signin',\n    //         state: { redirectUrl: previouseRoute },\n    //     }}\n    // />\n    ;\n  }\n};\n\n_s(AuthGuard, \"Z1AN8CrSmhMm5y1qLSktCqBtxng=\", false, function () {\n  return [useAuth, useLocation];\n});\n\n_c = AuthGuard;\nexport default AuthGuard;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthGuard\");","map":{"version":3,"sources":["/Users/dimartinez/workspace/metrics-api-fe/src/app/auth/AuthGuard.jsx"],"names":["useAuth","flat","React","useState","useEffect","useContext","Navigate","useLocation","AppContext","AllPages","getUserRoleAuthStatus","pathname","user","routes","matched","find","r","path","authenticated","auth","length","includes","role","console","log","AuthGuard","children","isAuthenticated","previouseRoute","setPreviousRoute","isUserRoleAuthenticated","redirectUrl"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,mBAApB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,kBAAtC;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,SAASC,QAAT,QAAyB,kBAAzB;;;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,QAAD,EAAWC,IAAX,EAAiBC,MAAjB,EAA4B;AACtD,MAAI,CAACD,IAAL,EAAW;AACP,WAAO,KAAP;AACH;;AACD,MAAME,OAAO,GAAGD,MAAM,CAACE,IAAP,CAAY,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,IAAF,KAAWN,QAAlB;AAAA,GAAZ,CAAhB;AAEA,MAAMO,aAAa,GACfJ,OAAO,IAAIA,OAAO,CAACK,IAAnB,IAA2BL,OAAO,CAACK,IAAR,CAAaC,MAAxC,GACMN,OAAO,CAACK,IAAR,CAAaE,QAAb,CAAsBT,IAAI,CAACU,IAA3B,CADN,GAEM,IAHV;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ,EAAqBF,IAArB;AACA,SAAOM,aAAP;AACH,CAZD;;AAcA,IAAMO,SAAS,GAAG,SAAZA,SAAY,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAChC,iBAAkC1B,OAAO,EAAzC;AAAA,MAAQ2B,eAAR,YAAQA,eAAR;AAAA,MAAyBf,IAAzB,YAAyBA,IAAzB,CADgC,CAGhC;;;AAEA,kBAA2CT,QAAQ,CAAC,IAAD,CAAnD;AAAA;AAAA,MAAOyB,cAAP;AAAA,MAAuBC,gBAAvB;;AACA,qBAAqBtB,WAAW,EAAhC;AAAA,MAAQI,QAAR,gBAAQA,QAAR;;AACA,MAAME,MAAM,GAAGZ,IAAI,CAACQ,QAAQ,EAAT,CAAnB;AAEAc,EAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ;AAEA,MAAMkB,uBAAuB,GAAGpB,qBAAqB,CACjDC,QADiD,EAEjDC,IAFiD,EAGjDC,MAHiD,CAArD;AAKA,MAAIK,aAAa,GAAGS,eAAe,IAAIG,uBAAvC,CAhBgC,CAkBhC;AACA;AACA;AAEA;;AAEA1B,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIwB,cAAc,KAAK,IAAvB,EAA6BC,gBAAgB,CAAClB,QAAD,CAAhB;AAChC,GAFQ,EAEN,CAACA,QAAD,EAAWiB,cAAX,CAFM,CAAT;AAIA,MAAIV,aAAJ,EAAmB,oBAAO;AAAA,cAAGQ;AAAH,mBAAP,CAAnB,KACK;AACD,wBACI,QAAC,QAAD;AACI,MAAA,EAAE,EAAC,iBADP;AAEI,MAAA,KAAK,EAAE;AAAEK,QAAAA,WAAW,EAAEH;AAAf;AAFX;AAAA;AAAA;AAAA;AAAA,aADJ,CAKI;AACA;AACA;AACA;AACA;AACA;AAVJ;AAYH;AACJ,CA3CD;;GAAMH,S;UACgCzB,O,EAKbO,W;;;KANnBkB,S;AA6CN,eAAeA,SAAf","sourcesContent":["import useAuth from 'app/hooks/useAuth'\r\nimport { flat } from 'app/utils/utils'\r\nimport React, { useState, useEffect, useContext } from 'react'\r\nimport { Navigate, useLocation } from 'react-router-dom'\r\nimport AppContext from '../contexts/AppContext'\r\nimport { AllPages } from '../routes/routes'\r\n\r\nconst getUserRoleAuthStatus = (pathname, user, routes) => {\r\n    if (!user) {\r\n        return false\r\n    }\r\n    const matched = routes.find((r) => r.path === pathname)\r\n\r\n    const authenticated =\r\n        matched && matched.auth && matched.auth.length\r\n            ? matched.auth.includes(user.role)\r\n            : true\r\n    console.log(matched, user)\r\n    return authenticated\r\n}\r\n\r\nconst AuthGuard = ({ children }) => {\r\n    const { isAuthenticated, user } = useAuth()\r\n\r\n    // return <>{isAuthenticated ? children : <Navigate to=\"/session/signin\" />}</>\r\n\r\n    const [previouseRoute, setPreviousRoute] = useState(null)\r\n    const { pathname } = useLocation()\r\n    const routes = flat(AllPages())\r\n\r\n    console.log(user)\r\n\r\n    const isUserRoleAuthenticated = getUserRoleAuthStatus(\r\n        pathname,\r\n        user,\r\n        routes\r\n    )\r\n    let authenticated = isAuthenticated && isUserRoleAuthenticated\r\n\r\n    // IF YOU NEED ROLE BASED AUTHENTICATION,\r\n    // UNCOMMENT ABOVE TWO LINES, getUserRoleAuthStatus METHOD AND user VARIABLE\r\n    // AND COMMENT OUT BELOW LINE\r\n\r\n    // let authenticated = isAuthenticated\r\n\r\n    useEffect(() => {\r\n        if (previouseRoute !== null) setPreviousRoute(pathname)\r\n    }, [pathname, previouseRoute])\r\n\r\n    if (authenticated) return <>{children}</>\r\n    else {\r\n        return (\r\n            <Navigate\r\n                to=\"/session/signin\"\r\n                state={{ redirectUrl: previouseRoute }}\r\n            />\r\n            // <Redirect\r\n            //     to={{\r\n            //         pathname: '/session/signin',\r\n            //         state: { redirectUrl: previouseRoute },\r\n            //     }}\r\n            // />\r\n        )\r\n    }\r\n}\r\n\r\nexport default AuthGuard\r\n"]},"metadata":{},"sourceType":"module"}