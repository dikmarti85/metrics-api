{"ast":null,"code":"import _objectSpread from \"/Users/dimartinez/workspace/metrics-api-fe/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/dimartinez/workspace/metrics-api-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/dimartinez/workspace/metrics-api-fe/src/app/views/material-kit/auto-complete/AutocompleteCombo.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { Fragment } from 'react';\nimport { TextField, Autocomplete } from '@mui/material';\nimport { createFilterOptions } from '@mui/material/Autocomplete';\nimport { styled } from '@mui/system';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar AutoComplete = styled(Autocomplete)(function () {\n  return {\n    width: 300,\n    marginBottom: '16px'\n  };\n});\nvar suggestions = [{\n  label: 'Afghanistan'\n}, {\n  label: 'Aland Islands'\n}, {\n  label: 'Albania'\n}, {\n  label: 'Algeria'\n}, {\n  label: 'American Samoa'\n}, {\n  label: 'Andorra'\n}, {\n  label: 'Angola'\n}, {\n  label: 'Anguilla'\n}, {\n  label: 'Antarctica'\n}, {\n  label: 'Antigua and Barbuda'\n}, {\n  label: 'Argentina'\n}, {\n  label: 'Armenia'\n}, {\n  label: 'Aruba'\n}, {\n  label: 'Australia'\n}, {\n  label: 'Austria'\n}, {\n  label: 'Azerbaijan'\n}, {\n  label: 'Bahamas'\n}, {\n  label: 'Bahrain'\n}, {\n  label: 'Bangladesh'\n}, {\n  label: 'Barbados'\n}, {\n  label: 'Belarus'\n}, {\n  label: 'Belgium'\n}, {\n  label: 'Belize'\n}, {\n  label: 'Benin'\n}, {\n  label: 'Bermuda'\n}, {\n  label: 'Bhutan'\n}, {\n  label: 'Bolivia, Plurinational State of'\n}, {\n  label: 'Bonaire, Sint Eustatius and Saba'\n}, {\n  label: 'Bosnia and Herzegovina'\n}, {\n  label: 'Botswana'\n}, {\n  label: 'Bouvet Island'\n}, {\n  label: 'Brazil'\n}, {\n  label: 'British Indian Ocean Territory'\n}, {\n  label: 'Brunei Darussalam'\n}];\nvar filter = createFilterOptions();\n\nvar AutocompleteCombo = function AutocompleteCombo() {\n  _s();\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var handleChange = function handleChange(event, newValue) {\n    if (newValue && newValue.inputValue) {\n      setValue({\n        label: newValue.inputValue\n      });\n      return;\n    }\n\n    setValue(newValue);\n  };\n\n  var filterOptions = function filterOptions(options, params) {\n    var filtered = filter(options, params);\n\n    if (params.inputValue !== '') {\n      filtered.push({\n        inputValue: params.inputValue,\n        label: \"Add \\\"\".concat(params.inputValue, \"\\\"\")\n      });\n    }\n\n    return filtered;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AutoComplete, {\n      options: suggestions,\n      getOptionLabel: function getOptionLabel(option) {\n        return option.label;\n      },\n      renderInput: function renderInput(params) {\n        return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n          label: \"Combo box\",\n          variant: \"outlined\",\n          fullWidth: true\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(AutoComplete, {\n      value: value,\n      onChange: handleChange,\n      filterOptions: filterOptions,\n      options: suggestions,\n      getOptionLabel: function getOptionLabel(option) {\n        // e.g value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n\n        return option.label;\n      },\n      renderOption: function renderOption(option) {\n        return option.label;\n      },\n      style: {\n        width: 300\n      },\n      freeSolo: true,\n      renderInput: function renderInput(params) {\n        return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n          label: \"Free solo with text demo\",\n          variant: \"outlined\",\n          fullWidth: true\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(AutoComplete, {\n      options: suggestions,\n      getOptionLabel: function getOptionLabel(option) {\n        return option.label;\n      },\n      getOptionDisabled: function getOptionDisabled(option) {\n        return option === suggestions[0] || option === suggestions[2];\n      },\n      renderInput: function renderInput(params) {\n        return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n          label: \"Disabled option\",\n          variant: \"outlined\",\n          fullWidth: true\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(AutocompleteCombo, \"EEjdpY/CSe7/lDQurV9yi1RbKSs=\");\n\n_c = AutocompleteCombo;\nexport default AutocompleteCombo;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutocompleteCombo\");","map":{"version":3,"sources":["/Users/dimartinez/workspace/metrics-api-fe/src/app/views/material-kit/auto-complete/AutocompleteCombo.jsx"],"names":["React","Fragment","TextField","Autocomplete","createFilterOptions","styled","AutoComplete","width","marginBottom","suggestions","label","filter","AutocompleteCombo","useState","value","setValue","handleChange","event","newValue","inputValue","filterOptions","options","params","filtered","push","option"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react'\nimport { TextField, Autocomplete } from '@mui/material'\nimport { createFilterOptions } from '@mui/material/Autocomplete'\nimport { styled } from '@mui/system'\n\nconst AutoComplete = styled(Autocomplete)(() => ({\n    width: 300,\n    marginBottom: '16px',\n}))\n\nconst suggestions = [\n    { label: 'Afghanistan' },\n    { label: 'Aland Islands' },\n    { label: 'Albania' },\n    { label: 'Algeria' },\n    { label: 'American Samoa' },\n    { label: 'Andorra' },\n    { label: 'Angola' },\n    { label: 'Anguilla' },\n    { label: 'Antarctica' },\n    { label: 'Antigua and Barbuda' },\n    { label: 'Argentina' },\n    { label: 'Armenia' },\n    { label: 'Aruba' },\n    { label: 'Australia' },\n    { label: 'Austria' },\n    { label: 'Azerbaijan' },\n    { label: 'Bahamas' },\n    { label: 'Bahrain' },\n    { label: 'Bangladesh' },\n    { label: 'Barbados' },\n    { label: 'Belarus' },\n    { label: 'Belgium' },\n    { label: 'Belize' },\n    { label: 'Benin' },\n    { label: 'Bermuda' },\n    { label: 'Bhutan' },\n    { label: 'Bolivia, Plurinational State of' },\n    { label: 'Bonaire, Sint Eustatius and Saba' },\n    { label: 'Bosnia and Herzegovina' },\n    { label: 'Botswana' },\n    { label: 'Bouvet Island' },\n    { label: 'Brazil' },\n    { label: 'British Indian Ocean Territory' },\n    { label: 'Brunei Darussalam' },\n]\n\nconst filter = createFilterOptions()\n\nconst AutocompleteCombo = () => {\n    const [value, setValue] = React.useState(null)\n\n    const handleChange = (event, newValue) => {\n        if (newValue && newValue.inputValue) {\n            setValue({\n                label: newValue.inputValue,\n            })\n            return\n        }\n        setValue(newValue)\n    }\n\n    const filterOptions = (options, params) => {\n        const filtered = filter(options, params)\n        if (params.inputValue !== '') {\n            filtered.push({\n                inputValue: params.inputValue,\n                label: `Add \"${params.inputValue}\"`,\n            })\n        }\n        return filtered\n    }\n\n    return (\n        <Fragment>\n            <AutoComplete\n                options={suggestions}\n                getOptionLabel={(option) => option.label}\n                renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        label=\"Combo box\"\n                        variant=\"outlined\"\n                        fullWidth\n                    />\n                )}\n            />\n\n            <AutoComplete\n                value={value}\n                onChange={handleChange}\n                filterOptions={filterOptions}\n                options={suggestions}\n                getOptionLabel={(option) => {\n                    // e.g value selected with enter, right from the input\n                    if (typeof option === 'string') {\n                        return option\n                    }\n                    if (option.inputValue) {\n                        return option.inputValue\n                    }\n                    return option.label\n                }}\n                renderOption={(option) => option.label}\n                style={{ width: 300 }}\n                freeSolo\n                renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        label=\"Free solo with text demo\"\n                        variant=\"outlined\"\n                        fullWidth\n                    />\n                )}\n            />\n\n            <AutoComplete\n                options={suggestions}\n                getOptionLabel={(option) => option.label}\n                getOptionDisabled={(option) =>\n                    option === suggestions[0] || option === suggestions[2]\n                }\n                renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        label=\"Disabled option\"\n                        variant=\"outlined\"\n                        fullWidth\n                    />\n                )}\n            />\n        </Fragment>\n    )\n}\n\nexport default AutocompleteCombo\n"]},"metadata":{},"sourceType":"module"}